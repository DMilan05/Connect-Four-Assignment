package Player;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class PlayerNameTest {
    // The Mock and the Test was generated by ChatGPT.

    private PlayerName playerName;
    private InputProvider mockInputProvider;

    @BeforeEach
    void setUp() {
        // Mock the InputProvider class
        mockInputProvider = Mockito.mock(InputProvider.class);
        // Initialize the PlayerName object with the mocked InputProvider
        playerName = new PlayerName("DefaultName", mockInputProvider);
    }

    @Test
    void testPlayerNameInitialization() {
        // Test that the player name is initialized correctly
        assertEquals("DefaultName", playerName.getPlayerName(), "Player name should be initialized to 'DefaultName'.");
    }

    @Test
    void testGetPlayerName() {
        // Test that the getter returns the correct player name
        assertEquals("DefaultName", playerName.getPlayerName(), "getPlayerName() should return 'DefaultName'.");
    }

    @Test
    void testSetPlayerName() {
        // Test that the setter updates the player name correctly
        playerName.setPlayerName("NewPlayer");
        assertEquals("NewPlayer", playerName.getPlayerName(), "setPlayerName() should update the name to 'NewPlayer'.");
    }

    @Test
    void testAskForPlayerName() {
        // Set up mock input for the input provider
        when(mockInputProvider.getInput()).thenReturn("JohnDoe");

        // Call askForPlayerName(), which will use the mock input
        playerName.askForPlayerName();

        // Verify that the player name was updated correctly based on the mock input
        assertEquals("JohnDoe", playerName.getPlayerName(), "askForPlayerName() should update the name to 'JohnDoe'.");

        // Verify that getInput() was called once
        verify(mockInputProvider, times(1)).getInput();
    }
}
